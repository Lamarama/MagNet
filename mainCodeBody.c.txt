/*
 * main.c
 */

// Include files
#include "F28x_Project.h"

// Function Prototypes.
void ConfigureADC(void);
void SetUpADCSoftware(void);
void sample(void);
void controlCode(Uint16 data);

//Global Variables
Uint16 HPdata;

int main(void) {
	//The following is standard set up code for any
	//application on this TI Launchpad. This set up
	//sequence can be found in most if not all the
	//example programs in ControlSUITE
	InitSysCtrl();
	InitGpio();
	DINT;
	InitPieCtrl();
	IER = 0x0000;
	IFR = 0x0000;
	InitPieVectTable();
	EINT;
	ERTM;
	//End Setup Code
	
	//Set up ADC-A
	ConfigureADC();

	//Choose ADC channel and acquisition window
	SetUpADCSoftware();

	//Enter primary loop. This is an infinite loop
	//that will handle all of the processing of our
	//program.
	while(1) {
		sample();
		controlCode();
		DELAY_US(25000);//delay for 25ms
	}
	return 0;
}

void ConfigureADC(void) {
	EALLOW;
	AdcaRegs.ADCCTL2.bit.PRESCALE = 6; //Set ADCCLK divider to /4
	//Set resolution of ADC-A
	AdcSetMode(ADC_ADCA, ADC_RESOLUTION_12BIT, ADC_SIGNALMODE_SINGLE);
	//Set Pulse Position to Late
	AdcaRegs.ADCCTL1.bit.INTPULSEPOS = 1;
	//Power up ADC
	AdcaRegs.ADCCTL1.bit.ADCPWDNZ = 1;
	//delay 1ms to allow enough time for power up
	DELAY_US(1000);
}

void SetUpADCSoftware(void) {
	Uint16 acqps = 14;//time in which ADC can read data from input pin (75ns)

	EALLOW;
	AdcaRegs.ADCSOC1CTL.bit.CHSEL = 1;//Sets input channel to ADC-in1
	AdcaRegs.ADCSOC1CTL.bit.ACQPS = acqps;
	//configures HWI for channel 1 of the ADC
	AdcaRegs.ADCINTSEL1N2.bit.INT1SEL = 1; //end of SOC1 will set INT1 flag
	AdcaRegs.ADCINTSEL1N2.bit.INT1E = 1;   //enable INT1 flag
	AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1; //make sure INT1 flag is cleared
}

//Function that reads in data from ADC
void sample(void) {
	//Forces SOC1 to alert ADC-A channel 1 to read in data
	AdcaRegs.ADCSOCFRC1.all = 0x0002;

	//This register is a hardware interrupt that will
	//alert us as to when the ADC is finished reading in data.
	//The value will be set to 1 automatically by the hardware
	//when the data acquisition is complete
	while(AdcaRegs.ADCINTFLG.bit.ADCINT1 == 0);
	//This will clear the ADCINT1 value so that the ADC
	//can read in more values at a later time
	AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;
	//store the data we just collected
	HPdata = AdcaResultRegs.ADCRESULT1;
}
